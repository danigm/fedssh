- si tienes la clave publica en .ssh/authorized_keys, no mira los módulos pam.
    Primero mira la clave publica, luego mira los modulos PAM.

- Se puede hacer de la siguiente manera:

    1. te logueas por web en el servidor central.
 
    2. el servidor envía tu clave publica a todos los ssh federados.
    
    3. cada ssh federado crea un usuario con esa clave.
    
        3.1 esta clave puede tener un timeout, por lo que se elimina al pasar
        cierto tiempo.
    
    4. el usuario puede entrar indistintamente a cada máquina, sin tener que
    autenticarse nuevamente.

    Si no tenemos la clave se genera y se instala automáticamente con un tipo
    mime y una aplicación externa. También se podría hacer a mano.


fichero auth2-pubkey.c <- aquí es donde busca las claves en el fichero de claves
user_key_allowed2(struct passwd *pw, Key *key, char *file)

fichero auth-options.c <- aquí es donde autoriza a un usuario a entrar sabiendo
el fichero en el que está la clave y la linea auth_parse_options(struct passwd
*pw, char *opts, char *file, u_long linenum)

@@ mar dic 11 13:53:36 CET 2007
    -He montado la aplicacion ssh en federacion21, bajo el directorio protegido,
    que está protegido por el SP de shibboleth

    -He tenido que modificar el fichero auth2-pubkey.c, para que no compruebe el
    propietario del fichero de claves publicas, puesto que sino falla.

    -He modificado el servidor RSA para que ahora mire las claves en un fichero
    de texto, y de forma fácil sea extendible para que lo mire de una base de
    datos o de lo que sea.

    -He realizado algunos test, y he comprobado que funciona.


Ya he puesto la compilación de ssh_fed en un fichero separado, ssh_fed.{c,h}.
Para que compile con este fichero hace falta incluir ssh_fed.o en el Makefile

Ya está el servidor de claves y el puerto en la configuración del sshd. He
tenido que modificar los ficheros servconf.c y servconf.h para añadir las 3
opciones:
    -usefed yes|no
    -fedport 12345
    -fedserver federacion21.us.es


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X Se puede utilizar el campo userCertificate, pero está en base64, por lo    X
X que hay que decodificarlo. con python -> base64.b64decode(cadena)          X
X Mejor utilizar el ssh sshPublicKey del schema openssh-lpk_openldap         X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  
  - Mas cosas:
    - en el fichero del idp - resolver.xml he añadido:
        <SimpleAttributeDefinition
        id="urn:mace:dir:attribute-def:userCertificate;binary"
        valueHandler="edu.internet2.middleware.shibboleth.aa.attrresolv.provider.Base64ValueHandler">
        <DataConnectorDependency requires="directory"/>
        </SimpleAttributeDefinition>

        el valueHandler es lo más importante, lo decodifica.
    - hay que modificar el arp/arp.site.xml
    - y por parte del sp tambien hay que añadir el atributo en el aap.xml

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Para la aplicación useradd, hay que dar permiso de sudo a www-data para ssh, y
poner la clave publica del servidor donde está la aplicación en el root de todos
los servidores que queramos añadir, para que puedan crear los usuarios.

www-data ALL=NOPASSWD: /usr/bin/ssh
