Using Federation credentials to SSH login

This project is based in the paper of Feide: http://rnd.feide.no/content/feide-and-ssh-secure-shell

Problem:

    When we have lots of SSH accounts, we need to remember lots of
    passwords and it is in all SSH servers.

    Because that, if we want to change the password, it is needed to
    change it in all servers.  Furthermore, if one of that SSH servers
    is hacked, our password could be known by other person.

    Other problem related to password and SSH could be when you want
    to give a SSH service to many users, and you don't manage that
    users accounts. 

    Identity federation solve that problems, but it is designer only
    for web. This document describe how we use identity federation
    credentials to solve that problems in SSH services.

Objective:

    The objective of this project is use identity federation
    credentials to authenticate in SSH. We try to make easiest for
    user and for the administer of the service.

    We want the user could access to the service without write his own
    password. And could access to others federated servers
    automatically.

Solution:

    To make this, we use the ssh public key system that could be used
    with SSH servers. With that, there is not needed to write the
    password.

    The SSH server need to get the user public key from the federation
    system, but it work only in web applications. For that we put a
    global LDAP server. In that LDAP server we put an entry when the
    user login in the federation, and then from the SSH server we can
    look up if the user is authenticated.

    Our solution has two parts:
    
    1.- SP application

    One is an SP application made in php.  That is a global
    application, only one it's needed for all entities. The user enter
    in that web application, and it's redirected to his own IdP. Then
    when the user is authenticated, it's redirected to that
    application.

    That application receive the user name and ssh public
    key from the IdP, and write an entry in the global LDAP server.

    Furthermore in that application it is possible to write your
    ssh public key manually, if your IdP don't have it, or if your
    aren't in your own machine.

    The application make an entry in the LDAP server with the name of
    the user, concatenated with his entity name, some like
    username-entity (danigm-us), with the ssh public key, and with an
    timeout number.

    Since the login in that web application, the user can login in all
    the SSH servers automatically, without write any password.

    The look of that application is like that [1]

    2.- Openssh path
    
    The ssh server work this way:
        First try to authenticate the user with ssh public key,
        looking for keys in $HOME/.ssh/authorized_keys. If that works,
        login without ask for password.

        Second try to authenticate with PAM modules if that it's
        activated.

    At first, we think in a PAM module, but because of the ssh
    working, that method require that the user write a password or
    something similar.

    The way that we take is to modify the openssh server, that it's
    free software.

    To make that we write a patch to that ssh server. The objective of
    that patch is to touch only the needed files to make it strong to
    the variation of the openssh code.

    This patch touch the authenticate method of the server,
    introducing a subroutine exact after the server look for the
    public key in the local filesystem. 

    If the server don't find the user public key, that subroutine it's
    called. That asks for the user to the LDAP server, that we mentioned
    before. If the user is authenticated, the patched ssh server
    receive the public key, and the timestamp, that indicate the
    timeout of the login.

    The subroutine check if the time is correct, and then create a
    temp file in the local filesystem with that rsa public key. After
    that, check again the user identity, but now with the new temp
    file. If all is well, the user is authenticated directly. Else,
    the ssh server authentication method continue asking for the user
    password.

    All the parameters needed by that patch could be sets in the
    sshd.conf file.

    Now we use like public ssh key server a LDAP server, but the patch
    it's implemented to support others servers easily. You only need
    to write a function that ask for the user to the server, and
    return the ssh public key if it exist.

Problems:
    
    One problem for that solution is that the ssh server needs that
    the user has an account in that machine.

    For this problem we write a simple solution, it's a web
    application that is protected by an SP, and when the user login in
    the application, he can create an account in all machines that
    has the patched ssh server, and looks like this [2].

    Other problem is that the user could change the password, and if
    the user change the password, or write a file in the directory
    .ssh, he can login after without authenticate in the federation
    system, and we don't want that.

All the code could be found in the rediris forge [3].

Images:
    [1] sshApp.png
    [2] userAdd.png
Links:
    [3] https://forja.rediris.es/projects/aupaai/
